pygments: true
safe: true
rawurl: "https://raw.github.com/rikschennink/conditioner/master"
url: "http://localhost:4000"
version: 0.10.0
exclude: [node_modules]

api:
 -
   name: conditioner
   type: object
   description: |
     Call `init()` on the conditioner object to start loading the modules in the HTML document. Once this is done the conditioner will return the nodes it found as an array and will initialize them automatically once they are ready.

     Each Node contains one or more ModuleControllers, for each node only one ModuleController can have an active Module.

     The following methods are available on the conditioner object.
   methods:
    -
      name: init
      params:
        -
          name: options
          type: object
          description: options object
      description: |
        Shortcut to initialise conditioner. You can pass options along, `init()` will automatically call the [parse](#conditioner-parse) method passing the document scope as a parameter.
    -
      name: setOptions
      params:
        -
          name: options
          type: object
          description: options object
      description: Allows defining of page level Module options and shortcuts to modules.
    -
      name: parse
      params:
        -
          name: context
          type: Document|Element
          description: context to parse nodes
      returns: Array
      description: Finds and loads all Modules defined on child elements of the supplied context. Returns an array of found Nodes.
    -
      name: load
      params:
        -
          name: element
          type: Element
          description: temp
        -
          name: controllers
          type: Array|ModuleController
          description: controllers
      returns: NodeController | null
      description: Creates a NodeController based on the passed element and set of controllers.
    -
      name: sync
      returns: SyncedControllerGroup
      params:
        -
          name: args
          type: arguments
          description: List of module controllers to synchronize.
      description: Wraps the supplied controllers in a SyncedControllerGroup which will fire a load event when all modules have loaded.
    -
      name: getNode
      params:
        -
          name: selector
          type: String
          description: Selector to match the nodes to.
        -
          name: context
          type: Document|Element
          description: Context to search in.
      returns: NodeController | null
      description: Returns a single Node matching the supplied selector.
    -
      name: getNodes
      params:
        -
          name: selector
          type: String
          description: Selector to match the nodes to.
        -
          name: context
          type: Document|Element
          description: Context to search in.
      returns: Array
      description: Returns an Array of found Nodes matching the supplied selector.
 -
   name: NodeController
   type: Class
   params: element
   description: For each element found having a `data-module` attribute an object of type NodeController is made. The node object can then be queried for the ModuleControllers it contains.
   methods:
    -
      name: hasLoadedModule
      returns: boolean
      description: Tests if there is currently a module active on this node.
    -
      name: load
      params:
        -
          name: controllers
          type: Array
          description: Array of ModuleControllers
      description: Loads an array of ModuleControllers to this node.
    -
      name: getPriority
      returns: Number
      description: Returns the set priority for this node.
    -
      name: getElement
      returns: Element
      description: Returns the root element of the node.
    -
      name: getActiveModuleController
      returns: ModuleController | null
      description: Returns a reference to the currently active ModuleController.
    -
      name: getModuleController
      params:
        -
          name: path
          type: String
          description: Path to requirejs module.
      returns: ModuleController | null
      description: Finds and returns the first module to match the supplied path.
    -
      name: getModuleControllers
      params:
        -
          name: path
          type: String
          description: Path to requirejs module.
      returns: Array
      description: Finds all ModuleControllers matching the supplied path and returns them as an array.
    -
      name: matchesSelector
      params:
        -
          name: selector
          type: String
          description: CSS selector to match element to.
        -
          name: context
          type: Document|Element
          description: Context to search in.
      returns: boolean
      description: Tests if the element contained in the Node object matches the supplied CSS selector.
    -
      name: execute
      params:
        -
          name: method
          type: String
          description: Method to execute on module.
        -
          name: params
          type: Array
          description: Parameters to pass to method.
      returns: object
      description: Safely tries to executes a method on the currently active Module. Always returns an object containing a status code and a response data property.
 -
   name: ModuleController
   params:
    -
      name: path
      type: String
      description: Path to requirejs module.
    -
      name: element
      type: Element
      description: Reference to the element it's attached to.
    -
      name: options
      type: object
      description: Options for this ModuleController.
   type: Class
   description: The ModuleController loads and unloads the contained Module based on the conditions received. It propagates events from the contained Module so you can safely subscribe to them.
   events:
    -
      name: load
      description: Fired when the ModuleController has loaded the module it warps.
    -
      name: unload
      description: Fired when the ModuleController has unloaded the module it wraps.
    -
      name: init
      description: Fired when the ModuleController has initialised.
    -
      name: available
      description: Fired when the wrapped module becomes available for initialisation.
   methods:
    -
      name: matchesPath
      params:
        -
          name: path
          type: String
          description: Path to requirejs module.
      returns: boolean
      description: Returns true if the ModuleController is in charge of a module with the given path.
    -
      name: isModuleAvailable
      returns: boolean
      description: Returns true if the module is available for initialisation.
    -
      name: isModuleActive
      returns: boolean
      description: Returns true if the module contained within the ModuleController is currently loaded.
    -
      name: isModuleConditioned
      returns: boolean
      description: Tests if the wrapped module has conditioner applied to it.
    -
      name: execute
      params:
        -
          name: method
          type: String
          description: Method to execute on module.
        -
          name: params
          type: Array
          description: Parameters to pass to method.
      returns: object
      description: Safely tries to execute a method on the module wrapped by the ModuleController.
    -
      name: load
      description: Loads the Module if it's available (if conditions suitable). Publishes the `load` event once finished.
    -
      name: unload
      returns: boolean
      description: Unloads the Module if it's not already unloaded. Publishes the `unload` event once done.
 -
   name: SyncedControllerGroup
   type: Class
   description: A wrapper around a collection of module controllers which fires a `load` event once all modules in the collection have loaded.
   events:
     -
       name: load
       description: Fired when all wrapped Controllers have loaded.
     -
       name: unload
       description: Fired when all Controllers have loaded and one of them unloads.
 -
   name: Observer
   type: object
   description: Used for interobject communication.
   methods:
     -
       name: subscribe
       description: Subscribe to an event
       params:
        -
          name: obj
          type: object
          description: Object to listen on for events.
        -
          name: type
          type: String
          description: The type of event to listen for.
        -
          name: fn
          type: Function
          description: Function to call when the event fires.
     -
       name: unsubscribe
       description: Unsubscribe from further events
       params:
        -
          name: obj
          type: object
          description: object to stop listen on.
        -
          name: type
          type: String
          description: The type of event to stop listening for.
        -
          name: fn
          type: Function
          description: The function linked to this event.
     -
       name: publish
       description: Publish an event.
       params:
        -
          name: obj
          type: object
          description: The object to publish the event on.
        -
          name: type
          type: String
          description: The type of event to publish.
        -
          name: data
          type: object
          description: An optional dataset to pass along the event.
     -
       name: publishAsync
       description: Publishes an event async.
       params:
        -
          name: obj
          type: object
          description: The object to publish the event on.
        -
          name: type
          type: String
          description: The type of event to publish.
        -
          name: data
          type: object
          description: An optional dataset to pass along the event.
     -
       name: inform
       description: Setups up a link between the two objects so events published on the informant will be pushed to the receiver as well.
       params:
        -
          name: informant
          type: object
          description: This object will pass it's events on to the receiver.
        -
          name: receiver
          type: object
          description: The object to receive the events from the informant.
     -
       name: conceal
       description: Stop informing the receiver of events.
       params:
        -
          name: informant
          type: object
          description: The object currently functioning as informant.
        -
          name: receiver
          type: object
          description: The object currently functioning as receiver.
 -
   name: Helpers
   description: A set of helper functions available as requirejs modules.
   methods:
    -
      name: mergeObjects
      params:
       -
         name: target
         type: object
       -
         name: source
         type: object
      type: function
      description: Merge target and source object and returns the result as a new object.
    -
      name: matchesSelector
      params:
       -
         name: element
         type: Element
       -
         name: selector
         type: String
      returns: boolean
      type: function
      description: Tests if the passed element matches the given CSS selector.
    -
      name: contains
      params:
       -
         name: parent
         type: Element
       -
         name: child
         type: Element
      returns: object
      type: function
      description: Tests if the passed child is actually a child of the given parent.