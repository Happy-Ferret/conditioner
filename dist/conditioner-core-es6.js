/* conditioner-core 2.0.1 */const bindModule=e=>{const t=runPlugin("moduleGetName",e),n=chainPlugins("moduleSetName",t),u={destroy:null},o={alias:t,name:n,element:e,unmount:()=>{u.destroy&&(eachPlugins("moduleWillUnmount",o),u.destroy(),eachPlugins("moduleDidUnmount",o),o.onunmount.apply(e))},mount:()=>(eachPlugins("moduleWillMount",o),runPlugin("moduleImport",n).catch(t=>{eachPlugins("moduleDidCatch",t,o),o.onmounterror.apply(e,[t,o]),console.warn(t)}).then(t=>{u.destroy=runPlugin("moduleGetDestructor",runPlugin("moduleGetConstructor",t)(...runPlugin("moduleSetConstructorArguments",n,e,t))),eachPlugins("moduleDidMount",o),o.onmount.apply(e,[o])}),o),onmounterror:function(){},onmount:function(){},onunmount:function(){}};return o},parseQuery=e=>e.substr(1).split(" and @").map(e=>/^([a-z]+) (.+)/.exec(e).splice(1)),getContextMonitor=(e,t,n)=>getPlugins("monitor").find(t=>t.name===e).create(t,n),createContextualModule=(e,t)=>{const n=parseQuery(e).map(e=>getContextMonitor(...e,t.element)),u=()=>{n.reduce((e,t)=>!!e&&t.matches,!0)?t.mount():t.unmount()};return n.forEach(e=>e.addListener(u)),u(),t},createModule=e=>{const t=bindModule(e),n=runPlugin("moduleGetContext",e);return n?createContextualModule(n,t):t.mount()},hydrate=e=>[...runPlugin("moduleSelector",e)].map(createModule),plugins=[],addPlugin=e=>plugins.push(e),getPlugins=e=>plugins.filter(t=>Object.keys(t).includes(e)).map(t=>t[e]),eachPlugins=(e,...t)=>getPlugins(e).forEach(e=>e(...t)),chainPlugins=(e,...t)=>getPlugins(e).reduce((e,t)=>[t(...e)],t).shift(),runPlugin=(e,...t)=>getPlugins(e).pop()(...t);addPlugin({moduleSelector:e=>e.querySelectorAll("[data-module]"),moduleGetContext:e=>e.dataset.context,moduleImport:e=>import(`${e}`),moduleGetConstructor:e=>e.default,moduleGetDestructor:e=>e,moduleSetConstructorArguments:(e,t)=>[t],moduleGetName:e=>e.dataset.module,monitor:{name:"media",create:e=>self.matchMedia(e)}});export{hydrate,addPlugin};